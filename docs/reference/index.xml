<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on</title><link>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/</link><description>Recent content in Reference on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 04 Aug 2022 09:51:50 +0200</lastBuildDate><atom:link href="https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Considerations</title><link>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/considerations/</link><pubDate>Thu, 04 Aug 2022 09:31:05 +0200</pubDate><guid>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/considerations/</guid><description>You can find the initial grant proposal for the high level Rust SDK 1.0 here
External considerations #
The goal for this SDK was to create a set of tools that would help actors developer to get on building over the Filecoin network without having to think about overhead code used to comply to the network standard.
In that sense the SDK is meant to be:
Simple: Entry-level Rust developer should be able to use the SDK to produce actors that can be run in the FVM.</description></item><item><title>Usage</title><link>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/usage/</link><pubDate>Thu, 04 Aug 2022 09:30:30 +0200</pubDate><guid>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/usage/</guid><description>You may find the sources of the FVM Rust SDK here.
Limitations #
As of now some references to ref-fvm are done through cargo patches to ease the development of the SDK. This reference makes the SDK harder to use and to test through integration in a Filecoin Virtual Machine. However, the final version will be simply a line in your dependencies so please bear with us until then!</description></item><item><title>Procedural Macros</title><link>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/procedural-macros/</link><pubDate>Thu, 04 Aug 2022 09:31:05 +0200</pubDate><guid>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/procedural-macros/</guid><description>fvm_state #
To import in your actor everything needed by the procedural macro it is recommended to use the whole state module:
use fvm_rs_sdk::state::*; There are two things to know while using this procedural macro:
The procedural macro does not work on structure with lifetime or generic parameters to prevent problems around Serialization and Deserialization. When using the macro on a structure, fields that are not public will not be stored in the state.</description></item><item><title>Future Work</title><link>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/future-work/</link><pubDate>Thu, 04 Aug 2022 09:31:05 +0200</pubDate><guid>https://polyphene.github.io/fvm-rs-sdk-docs/docs/reference/future-work/</guid><description>If you have any idea for iterations that you can not find in the list down below please feel free to open an issue on the repository.
fvm_actor #
Developers should be able to develop their own invoke function without using #[fvm_actor] and still feel as less overhead as possible. Different design should be studied (macros for code generation of serde/dispatch/etc., code injection at dedicated places in the generated invoke &amp;hellip;) and one implemented.</description></item></channel></rss>